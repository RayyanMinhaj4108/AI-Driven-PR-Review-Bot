pipeline {
    agent any

    environment{
        OPENAI_API_KEY = credentials('OPENAI_API_KEY')
        PYTHON_PATH = "C:\\Users\\rayyan.minhaj\\AppData\\Local\\Programs\\Python\\Python312\\python.exe"
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
    }


    stages {             
        stage('Prepare Environment') {
            steps {
                script {

                    powershell 'gci env:\\ | ft name,value -autosize'
                    
                    powershell '& git config --add remote.origin.fetch +refs/heads/main:refs/remotes/origin/main'
                    
                    powershell '& git fetch --no-tags'
                }
            }
        }
        stage('Get PR Author') {
            steps {
                script {
    
                    def author = powershell(script: "git show -s --format=\"%aN\" ${env.GIT_COMMIT}", returnStdout: true).trim()
                    echo "Author: ${author}"
                    def allowedAuthors = ["RayyanMinhaj"]  
                    
                    if (allowedAuthors.contains(author)) {
                        echo "Author ${author} is allowed."
                    } else {
                        echo "Author ${author} is not allowed to run this pipeline."
                        error "Pipeline execution stopped due to unauthorized author."
                    }
                }
            }
        }
        stage('Generate Disclaimer'){
            steps{
                script{
                    withEnv(["PR_NUMBER=${env.GITHUB_PR_NUMBER}"]){ //i found this from the gci env cmd
                        powershell "& ${env.PYTHON_PATH} config_files/disclaimer.py"
                    }  
                }
            }    
        }
        stage('Generate Git Diff') {
            steps {
                script {
                    // Perform a diff for .py files and save the output with the actual changes to a text file
                    def diffOutput = powershell(returnStdout: true, script: '''
                        git diff origin/main...origin/$env:GITHUB_PR_SOURCE_BRANCH -- *.py > git_diff.txt
                    ''').trim()

                    // Archive the git diff output as an artifact
                    archiveArtifacts artifacts: 'git_diff.txt', allowEmptyArchive: false
                }
            }
        }

        stage('Generate Report'){
            steps{
                script{
                    withEnv(["PR_NUMBER=${env.GITHUB_PR_NUMBER}"]){
                        powershell "& ${env.PYTHON_PATH} config_files/generate_report.py git_diff.txt > patches.txt"   

                        archiveArtifacts artifacts: 'patches.txt', allowEmptyArchive: false       
                    }
                }    
            }
        }
    }
}
