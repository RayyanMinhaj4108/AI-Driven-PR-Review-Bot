pipeline {
    agent any

    environment{
        OPENAI_API_KEY = credentials('OPENAI_API_KEY')
        PYTHON_PATH = "C:\\Users\\rayyan.minhaj\\AppData\\Local\\Programs\\Python\\Python312\\python.exe"
        GITLAB_API_TOKEN = credentials('GITLAB_TOKEN')
    }

    stages {
        stage('Print Environment Variables') {
            steps {
                powershell 'gci env:\\ | ft name,value -autosize'
            }
        }
        stage('Generating Disclaimer'){
            steps {
                withEnv(["GITLAB_API_TOKEN=${env.GITLAB_API_TOKEN}",
                        "GITLAB_TARGET_PROJECT_ID=${env.gitlabMergeRequestTargetProjectId}",
                        "GITLAB_MERGE_REQUEST_ID=${env.gitlabMergeRequestIid}"
                        ]){ //i found this from the gci env cmd
                        powershell "& ${env.PYTHON_PATH} config_files/disclaimer.py"
                }  
            }
        }
        stage('Generate Git Diff') {
            steps {
                script {
                    // Perform a diff for .py files and save the output with the actual changes to a text file
                    def diffOutput = powershell(returnStdout: true, script: '''
                        git diff origin/$env:gitlabTargetBranch...origin/$env:gitlabSourceBranch -- *.py > git_diff.txt
                    ''').trim()

                    // Archive the git diff output as an artifact
                    archiveArtifacts artifacts: 'git_diff.txt', allowEmptyArchive: false
                }
            }
        }
        stage('Generate Report'){
            steps{
                script{
                    def reportOutput = powershell(script: "& ${env.PYTHON_PATH} config_files/generate_report.py git_diff.txt", returnStdout: true).trim()
                    writeFile file: 'PR_Report.txt', text: reportOutput
                    
                    archiveArtifacts artifacts: 'PR_Report.txt', allowEmptyArchive: false
                }
            }    
        }
        stage('Posting AI Generated Comment'){
            steps {
                withEnv(["GITLAB_API_TOKEN=${env.GITLAB_API_TOKEN}",
                        "GITLAB_TARGET_PROJECT_ID=${env.gitlabMergeRequestTargetProjectId}",
                        "GITLAB_MERGE_REQUEST_ID=${env.gitlabMergeRequestIid}"
                        ]){ //i found this from the gci env cmd
                        powershell "& ${env.PYTHON_PATH} config_files/post_comment_pr.py"
                }  
            }
        }
    }
}